{
	"name": "df_Seattle_LocationDim",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_GeoDataFile",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_LocationDim_Seattle",
						"type": "DatasetReference"
					},
					"name": "sinkLocationDim"
				}
			],
			"transformations": [
				{
					"name": "surrogateKey"
				},
				{
					"name": "derivedColumn"
				}
			],
			"scriptLines": [
				"parameters{",
				"     JobID as string ('55')",
				"}",
				"source(output(",
				"          state_fips as short,",
				"          state as string,",
				"          state_abbr as string,",
				"          zipcode as string,",
				"          county as string,",
				"          city as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source1 keyGenerate(output(SK_ID as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey",
				"surrogateKey derive(DI_CREATED_DT = currentTimestamp(),",
				"          DI_JOB_ID = $JobID) ~> derivedColumn",
				"derivedColumn sink(allowSchemaDrift: false,",
				"     validateSchema: false,",
				"     input(",
				"          LOCATION_SK as string,",
				"          CITY as string,",
				"          STATE as string,",
				"          ZIP_CODE as string,",
				"          DI_JOB_ID as string,",
				"          DI_LOAD_DT as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     truncate:true,",
				"     format: 'table',",
				"     stageInsert: true,",
				"     mapColumn(",
				"          LOCATION_SK = SK_ID,",
				"          STATE = state,",
				"          ZIP_CODE = zipcode,",
				"          CITY = city,",
				"          DI_JOB_ID,",
				"          DI_LOAD_DT = DI_CREATED_DT",
				"     )) ~> sinkLocationDim"
			]
		}
	}
}